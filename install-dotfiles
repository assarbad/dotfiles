#!/usr/bin/env bash
# vim: set autoindent smartindent ts=4 sw=4 sts=4 noet filetype=sh:
# This script now drives the 'install.script' goal for the GNUmakefile
[[ -t 1 ]] && { cG="\033[1;32m"; cR="\033[1;31m"; cB="\033[1;34m"; cW="\033[1;37m"; cY="\033[1;33m"; cG_="\033[0;32m"; cR_="\033[0;31m"; cB_="\033[0;34m"; cW_="\033[0;37m"; cY_="\033[0;33m"; cZ="\033[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
DOTFIROOT="${DOTFIROOT:-$(pwd)}"
LOCALROOT="$HOME/.local/dotfiles"
readonly TGTDIR=${TGTDIR:-$HOME}
readonly IAM=$(whoami)
readonly HOSTNAME=$(hostname -f)
readonly HOST=$(hostname -s)
readonly DOMAIN=${HOSTNAME//$HOST/_}
###############################################################################
###############################################################################
### Logic:
### ~/.dotfiles contains the base files
###   -> copied only when newer than target files (directories created)
### ~/.local/dotfiles/{append,custom/override}/$moniker
###   -> override copied unconditionally
###   -> append added to target files that exist
###   -> custom scripts get executed
###############################################################################
###############################################################################

function debug
{
	local -r FMTSTR="$1"
	shift
	[[ -v DEBUG ]] && printf >&2 "${cW}[DBG]${cZ} $FMTSTR\n" "$@"
}

function error
{
	local -r FMTSTR="$1"
	shift
	printf >&2 "${cR}[ERROR]${cZ} $FMTSTR\n" "$@"
}

function info
{
	local -r FMTSTR="$1"
	shift
	printf >&2 "${cW}[INFO]${cZ} $FMTSTR\n" "$@"
}

# Simply copies files from source to target. This observes the given mode, i.e.
# whether only newer or all files should be copied.
# (non-existing target means source is newer)
# NOTE: target directories are created on the fly
function copy_file
{
	local MODE="${1:-always}"
	local RELNAME="$2"
	local SRCBASEDIR="${4:-.}"
	if [[ "$MODE" =~ ^.*_rename$ ]]; then
		local TGTBASEDIR="${3%/*}"
		local TGTNAME="$TGTBASEDIR/${3##*/}"
	else
		local TGTBASEDIR="$3"
		local TGTNAME="$TGTBASEDIR/$RELNAME"
	fi
	local SRCNAME="$SRCBASEDIR/$RELNAME"
	# For relative names pointing to a subdirectory
	if [[ "$RELNAME" != "${RELNAME//\/}" ]]; then
		if [[ ! -d "${TGTNAME%/*}" ]]; then
			printf -- "  ${cW}%s${cZ}${cG}/${cZ}\n" "${RELNAME%/*}"
			( set -x; mkdir -p -- "${TGTNAME%/*}" ) && touch -r "${SRCNAME%/*}" -- "${TGTNAME%/*}"
		fi
	fi
	local COPY=1
	case $MODE in
		always|all) # fall through
			;;
		newer_rename)
			if [[ "$TGTNAME" -ot "$SRCNAME" ]]; then
				let COPY=1
			else
				let COPY=0
			fi
			;;
		newer)
			if [[ "$TGTNAME" -ot "$SRCNAME" ]]; then
				let COPY=1
			else
				let COPY=0
			fi
			;;
		*)
			printf -- "${cR}ERROR:${cZ} logic error.\n"
			exit 1
			;;
	esac
	debug "srcname=%q -> tgtname=%q" "$SRCNAME" "$TGTNAME"
	((COPY)) || return
	local ITEM_TEXT ITEM_COPIED ITEM_TIMESTAMPED
	if [[ "${RELNAME%/*}" == "${RELNAME##*/}" ]]; then
		printf -v ITEM_TEXT -- "  ${cZ}${cW}%s${cZ}" "${RELNAME}"
	else
		printf -v ITEM_TEXT -- "  ${cZ}%s/${cW}%s${cZ}" "${RELNAME%/*}" "${RELNAME##*/}"
	fi
	if [[ "$MODE" =~ ^.*_rename$ ]]; then
		ITEM_TEXT="$ITEM_TEXT -> ${cW}${TGTNAME##*/}${cZ}"
	fi
	if cp -- "$SRCNAME" "$TGTNAME"; then
		printf -v ITEM_COPIED -- " ${cW_}... copied${cZ}"
		if touch -r "$SRCNAME" -- "$TGTNAME" 2> /dev/null; then
			printf -v ITEM_TIMESTAMPED -- "${cW_}, set timestamp ${cG}[OK]${cZ}"
		else
			printf -v ITEM_TIMESTAMPED -- "${cW_}, ${cY}failed to set timestamp ${cG}[OK]${cZ}"
		fi
	else
		echo -e "  ${cR}copy failed${cZ}"
		exit 1
	fi
	echo -e "$ITEM_TEXT$ITEM_COPIED$ITEM_TIMESTAMPED"
}

function execute_customization
{
	local -r DIR="$1"
	local -r TYPE="$2"
	local -r FMTSTR="$3"
	shift 3
	debug "$FMTSTR" "$@"
	if [[ -x "$DIR/$TYPE" && ! -d "$DIR/$TYPE" ]]; then
		info "Executing customization script: %s/${cW}%s${cZ}" "${DIR##*/}" "$TYPE"
		TGTDIR="$TGTDIR" "$DIR/$TYPE" || { error "${cR}something failed with %s/%s?!${cZ}" "${DIR##*/}" "$TYPE"; }
	fi

}

function determine_dir_by_precedence
{
	local -r BASEDIR="$1"
	local -r DEFAULT="$2"
	shift 2
	for name in "$IAM@$HOST" "$IAM@$HOSTNAME" "$HOST" "$HOSTNAME" "$@"; do
		if [[ -d "$BASEDIR/$name" ]]; then
			D="$BASEDIR/$name"
			debug "D=%q" "$D"
			return
		fi
	done
	D="$BASEDIR/$DEFAULT"
	debug "D=%q (fallback)" "$D"
}

function execute_unconditional_override
{
	local D
	determine_dir_by_precedence "$@"
	if [[ -n "$D" && -d "$D" ]]; then
		debug "unconditional overrides (D=%q)" "$D"
		if [[ -x "${D%%/*}/ALL" && ! -d "${D%%/*}/ALL" ]]; then
			STEP="pre" execute_customization "${D%%/*}" "ALL" "unconditional overrides (pre)"
		elif [[ -x "${D%%/*}/ALL.sh" && ! -d "${D%%/*}/ALL.sh" ]]; then
			STEP="pre" execute_customization "${D%%/*}" "ALL.sh" "unconditional overrides (pre)"
		fi
		info "Overriding from ${cW}local${cZ} files (${cW}%s${cZ})" "${D#$HOME/}"
		while read fname; do
			copy_file always "${fname##$D/}" "$TGTDIR" "$D"
		done < <(find "$D/" -type f \( ! -path '*/.git/*' ! -path '*/.hg/*' \) | sort)
		if [[ -x "${D%%/*}/ALL" && ! -d "${D%%/*}/ALL" ]]; then
			STEP="post" execute_customization "${D%%/*}" "ALL" "unconditional overrides (post)"
		elif [[ -x "${D%%/*}/ALL.sh" && ! -d "${D%%/*}/ALL.sh" ]]; then
			STEP="post" execute_customization "${D%%/*}" "ALL.sh" "unconditional overrides (post)"
		fi
	fi
}

function execute_appends
{
	local D
	determine_dir_by_precedence "$@"
	debug "items to append (D=%q)" "$D"
	if [[ -n "$D" && -d "$D" ]]; then
		echo -e "Appending from ${cW}local${cZ} files (${cW}${D#$HOME/}${cZ})"
		while read fname; do
			X="${fname##$D/}"
			if [[ -e "$TGTDIR/$X" ]]; then
				if grep -q "Appended: ${D#$HOME/}:$X" "$TGTDIR/$X"; then
					# Was already appended, so check whether the combined file is older than any of its sources
					if [[ "$TGTDIR/$X" -ot "$fname" ]] || [[ "$TGTDIR/$X" -ot "$X" ]]; then
						copy_file always "$X" "$TGTDIR"
					else
						echo -e "  ${cY}Skipping ${cZ}${X%/*}/${cW}${X##*/}${cZ} (up-to-date)"
						continue
					fi
				fi
				echo -ne "  ${cZ}${X%/*}/${cW}${X##*/}${cZ} "
				if cat "$fname" >> "$TGTDIR/$X" 2> /dev/null; then
					echo -ne "${cG}[OK]${cZ}"
					if echo "# Appended: ${D#$HOME/}:$X" >> "$TGTDIR/$X"; then
						echo -e "${cG} + [marked]${cZ}"
					else
						echo ""
					fi
				else
					echo -e "  ${cR}appending failed: $?${cZ}"
				fi
			fi
		done < <(find "$D/" -type f \( ! -path '*/.git/*' ! -path '*/.hg/*' \) | sort)
	fi
}

function handle_specific_overrides
{
	local SRCBASEDIR="$1"
	[[ -d "$SRCBASEDIR" ]] || return
	STEP="pre" execute_customization "$SRCBASEDIR/custom" "PRE" "custom overrides (pre)"
	# Unconditional overrides
	execute_unconditional_override "$SRCBASEDIR/override" "$DOMAIN"
	# Appends
	execute_appends "$SRCBASEDIR/append" "$DOMAIN"
	STEP="main" execute_customization "$SRCBASEDIR/custom" "ALL" "custom overrides (main)"
	STEP="post" execute_customization "$SRCBASEDIR/custom" "POST" "custom overrides (post)"
}

echo -e "Copying ${cW}base${cZ} files"
while read fname; do
	case "$fname" in
		GNUmakefile|GNUmakefile.*|Mercurial.ini|README.rst|termclr256|append_payload|add-desktop-file|refresh-dotfiles|install-dotfiles|hgrc.*|dotfile_installer.*|termcolor|.vim/.remove-obsolete.sh|thoroughly-clean|bootstrap-ansible|gnupg-keygen.sh|configure-gitconfig)
			;;
		.config/sublime-text/*.olli)
			copy_file newer_rename "$fname" "$TGTDIR/${fname%.olli}"
			copy_file newer "$fname" "$TGTDIR"
			;;
		*)
			copy_file newer "$fname" "$TGTDIR"
			;;
	esac
done < <(find . -type f \( ! -path '*/.git/*' ! -path '*/.hg/*' \) -printf '%P\n' | sed '/^\.hg\//d;/^\.hgignore/d;/^machine-specific/d' | sort)
# Overrides, appends and custom scripts
handle_specific_overrides "$LOCALROOT"

# Install local hgrc for the repo
if [[ -d "$LOCALROOT/.hg" ]]; then
	make -C "$LOCALROOT" > /dev/null 2>&1
fi
if [[ -x "$DOTFIROOT/.vim/.remove-obsolete.sh" ]]; then
	( set -x; env TGTDIR="$TGTDIR" "$DOTFIROOT/.vim/.remove-obsolete.sh" )
fi
if [[ ! -d "$DOTFIROOT/.bazaar" && -d "$TGTDIR/.bazaar" ]]; then # no longer in use
	( set -x; rm -rf -- "$TGTDIR/.bazaar" )
fi
if [[ ! -d "$DOTFIROOT/.tmux" && -d "$TGTDIR/.tmux" ]]; then # no longer in use
	( set -x; rm -rf -- "$TGTDIR/.tmux" )
fi
if [[ -f "$TGTDIR/Mercurial.ini" && -z "$COMSPEC" ]]; then # remove previously copied Mercurial.ini
	( set -x; rm -f -- "$TGTDIR/Mercurial.ini" )
fi
if [[ -f "$TGTDIR/.config/alacritty/alacritty.yml" ]]; then # remove previously used alacritty.yml (now using .toml)
	( set -x; rm -f -- "$TGTDIR/.config/alacritty/alacritty.yml" )
fi
if [[ -f "$TGTDIR/.gitrc.d/gitconfig.LOCAL" && ! -f "$TGTDIR/.config/git/gitconfig.LOCAL" ]]; then
	( set -x; mv -- "$TGTDIR/.gitrc.d/gitconfig.LOCAL" "$TGTDIR/.config/git"/ )
fi
if [[ -f "$TGTDIR/.gitrc.d/gitconfig.USER" && ! -f "$TGTDIR/.config/git/gitconfig.USER" ]]; then
	( set -x; mv -- "$TGTDIR/.gitrc.d/gitconfig.USER" "$TGTDIR/.config/git"/ )
fi
if [[ -d "$TGTDIR/.gitrc.d" ]]; then
	( set -x; rm -rf -- "$TGTDIR/.gitrc.d" )
fi
if [[ -f "$TGTDIR/.gitconfig" ]]; then
	( set -x; rm -f -- "$TGTDIR/.gitconfig" )
fi
if [[ -f "$TGTDIR/.cargo/config" && ! -f "$TGTDIR/.cargo/config.toml" ]]; then
	( set -x; mv -- "$TGTDIR/.cargo/config" "$TGTDIR/.cargo/config.toml" )
elif [[ -f "$TGTDIR/.cargo/config" && -f "$TGTDIR/.cargo/config.toml" ]]; then
	( set -x; rm -f -- "$TGTDIR/.cargo/config" )
fi

# Fix the .gnupg/.ssh file/folder permissions
for i in .ssh/authorized_keys .gnupg/gpg.conf; do
	if [[ -d "$TGTDIR/${i%/*}" ]]; then
		chmod go= "$TGTDIR/${i%/*}" "$TGTDIR/$i"
	fi
done
[[ -e "$TGTDIR/.ssh/config" ]] && chmod u=rw,g=r,o= "$TGTDIR/.ssh/config"
exit 0
