#!/usr/bin/env bash
# vim: set autoindent smartindent ts=4 sw=4 sts=4 noet filetype=sh:
# This script now drives the 'install' goal for the GNUmakefile
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
DOTFIROOT="${DOTFIROOT:-$(pwd)}"
LOCALROOT="$HOME/.local/dotfiles"
TGTDIR=${TGTDIR:-$HOME}
HOSTNAME=$(hostname -f)
HOST=$(hostname -s)
DOMAIN=${HOSTNAME//$HOST/_}
###############################################################################
###############################################################################
### Logic:
### ~/.dotfiles contains the base files
###   -> copied only when newer than target files (directories created)
### ~/.local/dotfiles/{append,custom/override}/$moniker
###   -> override copied unconditionally
###   -> append added to target files that exist
###   -> custom scripts get executed
###############################################################################
###############################################################################

# Simply copies files from source to target. This observes the given mode, i.e.
# whether only newer or all files should be copied.
# (non-existing target means source is newer)
# NOTE: target directories are created on the fly
function copy_file
{
	local MODE="${1:-always}"
	local RELNAME="$2"
	local TGTBASEDIR="$3"
	local SRCBASEDIR="${4:-.}"
	local TGTNAME="$TGTBASEDIR/$RELNAME"
	local SRCNAME="$SRCBASEDIR/$RELNAME"
	# For relative names pointing to a subdirectory
	if [[ "$RELNAME" != "${RELNAME//\/}" ]]; then
		if [[ ! -d "${TGTNAME%/*}" ]]; then
			echo -e "  ${cW}${RELNAME%/*}${cZ}${cG}/${cZ}"
			mkdir -p "${TGTNAME%/*}" && touch -r "${SRCNAME%/*}" "${TGTNAME%/*}"
		fi
	fi
	local COPY=1
	case $MODE in
		always|all) # fall through
			;;
		newer)
			if [[ "$TGTNAME" -ot "$SRCNAME" ]]; then
				let COPY=1
			else
				let COPY=0
			fi
			;;
		*)
			echo -e "${cR}ERROR:${cZ} logic error."
			exit 1
			;;
	esac
	((COPY)) || return
	echo -en "  ${cZ}${RELNAME%/*}/${cW}${RELNAME##*/}${cZ}"
	if cp "$SRCNAME" "$TGTNAME"; then
		echo -en " ${cW_}... copied${cZ}"
		if touch -r "$SRCNAME" "$TGTNAME" 2> /dev/null; then
			echo -e "${cW_}, set timestamp ${cG}[OK]${cZ}"
		else
			echo -e "${cW_}, ${cY}failed to set timestamp ${cG}[OK]${cZ}"
		fi
	else
		echo -e "  ${cR}copy failed${cZ}"
		exit 1
	fi
}

function handle_specific_overrides
{
	local SRCBASEDIR="$1"
	[[ -d "$SRCBASEDIR" ]] || return
	# Unconditional overrides
	if [[ -d "$SRCBASEDIR/override/." ]]; then
		local D=""
		[[ -d "$SRCBASEDIR/override/$HOST/." ]] && D="$SRCBASEDIR/override/$HOST"
		[[ -z "$D" ]] && D="$SRCBASEDIR/override/$DOMAIN"
		if [[ -d "$D/." ]]; then
			echo -e "Overriding from ${cW}local${cZ} files (${cW}${D#$HOME/}${cZ})"
			while read fname; do
				copy_file always "${fname##$D/}" "$TGTDIR" "$D"
			done < <(find "$D/" -type f | sort)
		fi
	fi
	if [[ -d "$SRCBASEDIR/append/." ]]; then
		local D=""
		[[ -d "$SRCBASEDIR/append/$HOST/." ]] && D="$SRCBASEDIR/append/$HOST"
		[[ -z "$D" ]] && D="$SRCBASEDIR/append/$DOMAIN"
		if [[ -d "$D/." ]]; then
			echo -e "Appending from ${cW}local${cZ} files (${cW}${D#$HOME/}${cZ})"
			while read fname; do
				X="${fname##$D/}"
				if [[ -e "$TGTDIR/$X" ]]; then
					if grep -q "Appended: ${D#$HOME/}:$X" "$TGTDIR/$X"; then
						# Was already appended, so check whether the combined file is older than any of its sources
						if [[ "$TGTDIR/$X" -ot "$fname" ]] || [[ "$TGTDIR/$X" -ot "$X" ]]; then
							copy_file always "$X" "$TGTDIR"
						else
							echo -e "  ${cY}Skipping ${cZ}${X%/*}/${cW}${X##*/}${cZ} (up-to-date)"
							continue
						fi
					fi
					echo -ne "  ${cZ}${X%/*}/${cW}${X##*/}${cZ} "
					if cat "$fname" >> "$TGTDIR/$X" 2> /dev/null; then
						echo -ne "${cG}[OK]${cZ}"
						if echo "# Appended: ${D#$HOME/}:$X" >> "$TGTDIR/$X"; then
							echo -e "${cG} + [marked]${cZ}"
						else
							echo ""
						fi
					else
						echo -e "  ${cR}appending failed: $?${cZ}"
					fi
				fi
			done < <(find "$D/" -type f | sort)
		fi
	fi
	if [[ -d "$SRCBASEDIR/custom/." ]]; then
		if [[ -x "$SRCBASEDIR/custom/ALL" ]]; then
			echo -e "Executing customization script: ${cW}ALL${cZ}"
			env TGTDIR="$TGTDIR" "$SRCBASEDIR/custom/ALL" || echo -e "\t${cR}something failed?!${cZ}"
		fi
		[[ -x "$SRCBASEDIR/custom/$HOST" ]] && SCR="$SRCBASEDIR/custom/$HOST"
		[[ -z "$SCR" ]] && SCR="$SRCBASEDIR/custom/$DOMAIN"
		if [[ -x "$SCR" ]]; then
			echo -e "Executing customization script: ${cW}${SCR##*/}${cZ}"
			env TGTDIR="$TGTDIR" $SCR || echo -e "\t${cR}something failed?!${cZ}"
		fi
	fi
}

echo -e "Copying ${cW}base${cZ} files"
while read fname; do
	case "$fname" in
		GNUmakefile|README.rst|termclr256|append_payload|refresh-dotfiles|install-dotfiles|hgrc.*|dotfile_installer.*|termcolor|.vim/.remove-obsolete.sh)
			;;
		*)
			copy_file newer "$fname" "$TGTDIR"
			;;
	esac
done < <(find . -type f | sed 's/\.\///;/^\.hg\//d;/^\.hgignore/d;/^machine-specific/d' | sort)
# Overrides, appends and custom scripts
handle_specific_overrides "$LOCALROOT"

# Install local hgrc for the repo
if [[ -d "$LOCALROOT/.hg" ]]; then
	make -C "$LOCALROOT" > /dev/null 2>&1
fi
if [[ -x "$DOTFIROOT/.vim/.remove-obsolete.sh" ]]; then
	env TGTDIR="$TGTDIR" "$DOTFIROOT/.vim/.remove-obsolete.sh"
fi

# Fix the .gnupg/.ssh file/folder permissions
for i in .ssh/authorized_keys .gnupg/gpg.conf; do
	if [[ -d "$TGTDIR/${i%/*}" ]]; then
		chmod go= "$TGTDIR/${i%/*}" "$TGTDIR/$i"
	fi
done
[[ -e "$TGTDIR/.ssh/config" ]] && chmod u=rw,g=r,o= "$TGTDIR/.ssh/config"
exit 0
