# Oliver's .common_profile (Bash/Zsh) - author: oliver@assarbad.net - may be freely copied, taken apart, put together and what not ...
# vim: set autoindent smartindent ts=4 sw=4 sts=4 filetype=sh:

# If not running interactively, don't do anything
[[ $- == *i* ]] || return

# Some colors
declare -x cG="\e[1;32m" cR="\e[1;31m" cB="\e[1;34m" cW="\e[1;37m" cY="\e[1;33m" cG_="\e[0;32m" cR_="\e[0;31m" cB_="\e[0;34m" cW_="\e[0;37m" cY_="\e[0;33m" cZ="\e[0m"

function set_prompt_and_uid
{
	# Because UID is readonly we cannot use the real thing, so let's fake it below ;)
	local MYUID=$UID
	if [[ -v BASH_VERSION ]]; then
		if [[ $MYUID -eq 0 ]]; then
			declare -g PS1='${debian_chroot:+($debian_chroot)}\[\033[1;31m\]${SHLVL:+[$SHLVL] }\u\[\033[1;34m\]@\h\[\033[0m\]:\[\033[1;32m\]\w\[\033[0m\]\$ '
		else
			declare -g PS1='${debian_chroot:+($debian_chroot)}\[\033[01;34m\]${SHLVL:+[$SHLVL] }\u@\h\[\033[00m\]:\[\033[01;32m\]\w\[\033[00m\]\$ '
		fi
	elif [[ -v ZSH_VERSION ]]; then
		if [[ $EUID -eq 0 ]]; then
			declare -g PROMPT='%B%F{red}[%L] %n%f%F{blue}@%m%f%b:%F{green}%2~%f%# '
		else
			declare -g PROMPT='%B%F{blue}[%L] %n@%m%f%b:%F{green}%2~%f%# '
		fi
	fi
}

function add_home_bin
{
	if [[ -d "$HOME/bin" ]]; then
		if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
			PATH=$PATH:$HOME/bin
		fi
	fi
}

function set_remote_timeout
{
	# Superuser will get a timeout for the shell if it's a remote shell via SSH
	if [[ -n "$SSH_TTY" && $EUID -eq 0 ]]; then
		export TMOUT=1800
	fi
}

function clean_path_var
{
	# Remove empty entries
	export PATH=${PATH//::/:}
	if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || -n "$COMSPEC" ]]; then
		return
	fi

	if [[ $EUID -eq 0 ]]; then
		local NEWPATH='' LASTDIR=''
		if [[ -v ZSH_VERSION ]]; then
			setopt sh_word_split
		fi
		local IFS=:
		for dir in $PATH; do
			[[ -z "$dir" || ! -d "$dir" ]] && continue
			LASTDIR=$dir
			if command ls -lLd "$dir" 2> /dev/null | command grep -q '^d.......w. '; then
				printf "\nDirectory %s in PATH was world-writable, removed it from PATH!!!\n" "$dir"
			elif [[ "$NEWPATH" != "$dir" ]]; then
				NEWPATH="$NEWPATH:$dir"
			fi
		done
		if [[ -n "$NEWPATH" && "${NEWPATH:1}" != "$PATH" ]]; then
			# Remove the leading colon and export this as the path
			declare -x PATH="${NEWPATH:1}"
			declare -p PATH
		fi
	fi
	export PATH
}

function set_shell_options
{
	if [[ -v BASH_VERSION ]]; then
		# don't put duplicate lines in the history. See bash(1) for more options
		declare -g HISTCONTROL=erasedups:ignorespace
		declare -g HISTIGNORE="&:ls:ll:l:[bf]g:exit:clear:vim:env:cd:cdf:ccd:pushf:ducks:dux:psaux:lsb:chorme"
		declare -g HISTFILESIZE=3000

		shopt -s autocd > /dev/null 2>&1
		shopt -s checkwinsize > /dev/null 2>&1
		shopt -s cdspell > /dev/null 2>&1
		shopt -s dotglob > /dev/null 2>&1
		shopt -s extglob > /dev/null 2>&1
		shopt -s globskipdots > /dev/null 2>&1
	elif [[ -v ZSH_VERSION ]]; then
		declare -g HISTFILE=~/.zsh_history
		declare -g HISTSIZE=3000
		declare -g SAVEHIST=3000
		declare -g HIST_IGNORE="&:ls:ll:l:[bf]g:exit:clear:vim:env:cd:cdf:ccd:pushf:ducks:dux:psaux:lsb:chorme"
		setopt HIST_IGNORE_SPACE
		setopt autocd beep extendedglob
	fi
}

function ls_aliases
{
	# Alias definitions for ls. Figure out the feature set ... (GNU vs. others)
	if [[ "$OSTYPE" == "linux-gnu" || "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
		if type -p lsd > /dev/null 2>&1; then
			alias ls='lsd --group-dirs=first'
			alias ll='lsd --group-dirs=first --date "+%F %T" -l'
			alias l='lsd --group-dirs=first --date "+%F %T" -lA'
			alias tree='lsd --tree -l --date="+%F %T" --group-dirs=first --blocks=permission,size,date,name'
		else
			local MYLS_OPTIONS='--color=auto --time-style=long-iso'
			ls $MYLS_OPTIONS . > /dev/null 2>&1 || MYLS_OPTIONS='--color=auto'
			ls $MYLS_OPTIONS . > /dev/null 2>&1 || MYLS_OPTIONS=''
			[[ -n "$MYLS_OPTIONS" ]] && export LS_OPTIONS="$MYLS_OPTIONS"
			alias ls='ls $LS_OPTIONS'
			alias ll='ls $LS_OPTIONS -l'
			alias l='ls $LS_OPTIONS -Al'
		fi
	else
		[[ "$(uname -s)" == "Darwin"  ]] && export CLICOLOR=
		[[ "$(uname -s)" == "FreeBSD" ]] && export CLICOLOR=
		alias ll='ls -l'
		alias l='ls -Al'
	fi
	# color hard links in cyan, but a little darker than soft links
	if [[ -e "/etc/debian_version" ]] && type -p dircolors > /dev/null 2>&1; then
		# ls (from GNU coreutils) misbehaves in that it "succeeds" silently (exit code 0) although LS_COLORS is erroneous ... pain
		# ls: unrecognized prefix: mh
		# ls: unparsable value for LS_COLORS environment variable
		# However, this output doesn't seem to be shown when piping. How useless.
		command dircolors|command grep -q 'hl=' && export LS_COLORS="ln=01;36:hl=00;36"
		command dircolors|command grep -q 'mh=' && export LS_COLORS="ln=01;36:mh=00;36"
	fi
}

function system_specific_aliases
{
	local i
	# Syntax: __create_abs_alias <name> <command>
	__create_abs_alias()
	{
		type -p "$2" > /dev/null 2>&1 || return
		if [[ -n "$3" ]]; then
			alias $1="$3 $2"
		else
			alias $1="$2"
		fi
	}

	if [[ -e "/etc/debian_version" ]] || type -p apt > /dev/null 2>&1; then
		alias search='apt search'
		alias show='apt show'
		alias upgrade='apt update && apt full-upgrade'
		alias apti='apt --no-install-recommends install'
		alias purge='apt purge'
		alias autopurge='apt autoremove --purge'
		alias autoremove='apt autoremove'
	fi
	if [[ -e "/etc/debian_version" ]] || type -p dpkg > /dev/null 2>&1; then
		alias lp='command dpkg -l'
		alias lpg='command dpkg -l|grep -iE'
	fi
	if [[ -e "/etc/debian_version" ]]; then
		for i in debfoster:/usr/bin/debfoster deborphan:/usr/bin/deborphan; do
			__create_abs_alias ${i%%:*} "${i#*:}"
		done
		if [[ $EUID -ne 0 ]]; then
			for i in apt-get:/usr/bin/apt-get \
								aptitude:/usr/bin/aptitude \
								apt-mark:/usr/bin/apt-mark \
								apt:/usr/bin/apt \
								dpkg-reconfigure:/usr/sbin/dpkg-reconfigure \
								dpkg:/usr/bin/dpkg \
								service:/usr/sbin/service \
								lsof:/usr/bin/lsof \
								reboot:/usr/sbin/reboot \
								systemctl:/bin/systemctl \
								journalctl:/bin/journalctl
			do
				__create_abs_alias ${i%%:*} "${i#*:}" sudo
			done
		fi
	fi
	if [[ -e "/etc/redhat-release" ]] || type -p yum > /dev/null 2>&1; then
		alias search='yum -C search'
		alias show='yum -C info'
		if [[ $EUID -ne 0 ]] && type -p sudo > /dev/null 2>&1; then
			alias upgrade='sudo yum update'
		else
			alias upgrade='yum update'
		fi
	fi
	if [[ -e "/etc/redhat-release" ]]; then
		if [[ $EUID -ne 0 ]]; then
			for i in ifconfig:/sbin/ifconfig \
								service:/sbin/service \
								lsof:/usr/sbin/lsof \
								reboot:/sbin/reboot \
								yum:/usr/bin/yum \
								iptables:/sbin/iptables
			do
				__create_abs_alias ${i%%:*} "${i#*:}" sudo
			done
		fi
	fi
	if type -p pacman > /dev/null 2>&1; then
		# https://wiki.archlinux.org/title/Pacman/Rosetta
		alias apti='printf "You are not on Debian anymore\n"'
		alias search='pacman -Ss'
		alias show='pacman -Qi'
		if [[ $EUID -ne 0 ]] && type -p sudo > /dev/null 2>&1; then
			alias upgrade='sudo pacman -Syu'
			alias purge='sudo pacman -Rn'
			alias autopurge='sudo pacman -Rns'
			alias autoremove='sudo pacman -Rs'
		else
			alias upgrade='pacman -Syu'
			alias purge='pacman -Rn'
			alias autopurge='pacman -Rns'
			alias autoremove='pacman -Rs'
		fi
	fi
	if type -p uname > /dev/null 2>&1 && [[ $(uname -s) == "FreeBSD" ]] && type pkg > /dev/null 2>&1; then
		alias search='pkg search'
		alias show='pkg info'
		if [[ $UID -ne 0 ]]; then
			for i in pkg:/usr/sbin/pkg
			do
				__create_abs_alias ${i%%:*} "${i#*:}" sudo
			done
			alias upgrade='sudo pkg update && sudo pkg upgrade'
		else
			alias upgrade='pkg update && pkg upgrade'
		fi
	fi
	unset -f __create_abs_alias
}

function convenience_aliases
{
	ls_aliases
	system_specific_aliases
	# Convenience aliases
	alias ..='cd ..'
	alias ...='cd ../..'
	alias ....='cd ../../..'
	alias -- -='cd -'
	if type -p mc > /dev/null 2>&1; then
		alias mc='mc -c'
	fi
	if type -p ps > /dev/null 2>&1; then
		alias psaux='ps awwwux'
	fi
	if type -p nano > /dev/null 2>&1; then
		alias nano='nano -w'
	fi
	if type -p date > /dev/null 2>&1; then
		alias currdate='date +"%Y-%m-%d %H:%M:%S"'
	fi
	if type -p ssh > /dev/null 2>&1; then
		alias ssh='ssh -t'
	fi
	if type -p ssh > /dev/null 2>&1 && type -p find > /dev/null 2>&1 && type -p ls > /dev/null 2>&1; then
		alias list-ssh-sockets='find /tmp/ssh-* -name agent.\* -uid $EUID -exec ls -ahl {} \;'
	fi
	if type -p ssh-keygen > /dev/null 2>&1 && type -p test > /dev/null 2>&1; then
		alias ssh-list='for i in /etc/ssh/ssh_host_*.pub; do test -r $i && ssh-keygen -lf $i; done; for i in /etc/ssh/ssh_host_*.pub; do test -r $i && ssh-keygen -r $(hostname -s) -f $i; done'
	fi
	if type -p vim > /dev/null 2>&1 && type -p grep > /dev/null 2>&1; then
		export EDITOR=$(type -p vim)
		# Except on Windows and when in the terminal we set GIT_EDITOR
		if [[ -t 1 && "$OSTYPE" != "msys" && "$OSTYPE" != "cygwin" && -z "$COMSPEC" ]] && type -p git > /dev/null 2>&1; then
			export GIT_EDITOR=$(type -p vim)
		fi
		export VISUAL=$(type -p vim)
		if [[ -f "${BASHRCDIR:-$HOME}/.vimrc" ]]; then
			local VIMRC="-u \"${BASHRCDIR:-$HOME}/.vimrc\""
		fi
		if (vim --help 2> /dev/null|grep -q '[[:space:]]*-p'); then
			alias vim="env HOME="${BASHRCDIR:-$HOME}" vim -p -N -n -i NONE${VIMRC:+ $VIMRC}"
		else
			alias vim="env HOME="${BASHRCDIR:-$HOME}" vim -N -n -i NONE${VIMRC:+ $VIMRC}"
		fi
	fi

	if [[ -v BASH_VERSION ]]; then
		alias sb="source ~/.bash_profile && cd -"
	elif [[ -v ZSH_VERSION ]]; then
		alias sz="source ~/.zshrc && cd -"
	fi

	if type -p reset > /dev/null 2>&1 && type -p stty > /dev/null 2>&1 && type -p tput > /dev/null 2>&1; then
		alias tfix='reset; stty sane; tput rs1; clear; printf "\033c"'
	fi

	if type -p colordiff > /dev/null 2>&1; then
		alias diff="command colordiff -u"
	else
		alias diff="command diff -u"
	fi

	if type -p sort > /dev/null 2>&1 && type -p env > /dev/null 2>&1; then
		alias e="env|sort -i"
	elif type -p env > /dev/null 2>&1; then
		alias e="env"
	fi

	if type -p sudo > /dev/null 2>&1; then
		# beroot so we feel at home when assuming super-user rights
		if [[ $EUID -eq 0 ]]; then
			alias visudo='sudo -E visudo'
			if ! declare -pf beroot > /dev/null 2>&1; then
				function beroot
				{
					echo 'NOP'
				}
			fi
		else
			if ! declare -pf beroot > /dev/null 2>&1; then
				function beroot
				{
					if (($EUID)); then
						if [[ -f ~/.oldstyle-beroot ]]; then
							sudo -E -u root /usr/bin/env BASHRCDIR="$HOME" "$SHELL"
						else
							sudo -E -u root "$SHELL"
						fi
					else
						echo 'NOP'
					fi
				}
			fi
		fi
		if ! declare -pf beroot > /dev/null 2>&1; then
			declare -fgr beroot > /dev/null 2>&1
		fi
	fi
}

function load_ssh_agent
{
	if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || -n "$COMSPEC" ]]; then
		return
	fi

	# Load the SSH agent and if it's loaded already, add the default identity
	if type -p ssh-agent > /dev/null 2>&1; then
		local SSHAGENT SSHAGENTARGS TMUXEXE
		SSHAGENT=$(type -p ssh-agent)
		SSHAGENTARGS="-s"
		TMUXEXE="$(type -p tmux 2> /dev/null)"
		if [[ -v TMUX && -x "$TMUXEXE" ]]; then
			printf "${cY}Reusing${cZ} running ${cB}ssh-agent${cZ} inside tmux\n"
			eval "$("$TMUXEXE" show-environment -s)"
		elif [[ -z "$SSH_AUTH_SOCK" && -x "$SSHAGENT" ]]; then
			printf "${cY}Starting${cZ} ${cB}ssh-agent${cZ} inside tmux\n"
			eval "$("$SSHAGENT" $SSHAGENTARGS)"
			[[ -n "$SSH_AGENT_PID" && ! -v TMUX ]] && trap "kill $SSH_AGENT_PID" 0
		fi
	fi
	if type -p stat > /dev/null 2>&1; then
		local LDR="$HOME/.ssh/.load"
		if [[ -O "$LDR" && -G "$LDR" && -s "$LDR" ]]; then
			if (( $(stat -c '%a' "$LDR") <= 644 )); then
				source "$LDR"
			fi
		fi
	fi
}

if type -p starship > /dev/null 2>&1; then
	eval "$(starship init bash)"
else
	set_prompt_and_uid
	# The prompt command will only show the current directory and username if the terminal type is "correct"
	case "$TERM" in
		xterm*|rvxt*|screen*|putty*)
			export PROMPT_COMMAND='echo -ne "\033]0;${debian_chroot:+($debian_chroot)}${USER}@${HOSTNAME}: ${PWD}\007"'
			;;
	esac
fi
add_home_bin
set_remote_timeout
clean_path_var
set_shell_options
# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(lesspipe)"
umask 022
convenience_aliases
load_ssh_agent

if [[ -v BASH_VERSION ]]; then
	# Check for BASHRCDIR variable ...
	[[ -d "${BASHRCDIR:-$HOME}" ]] || BASHRCDIR="$HOME"
	BASHRCDIR=${BASHRCDIR:-$HOME}

	# Global Bash completion definitions
	if [[ $- == *i* ]]; then
		for i in /etc/bash_completion /usr/local/share/bash-completion/bash_completion.sh; do
			[[ -f "$i" ]] && source "$i"
		done
	fi

	# Load additional settings
	BASHHOST="${HOSTNAME%%.*}"
	BASHZONE="${HOSTNAME//$BASHHOST/_}"
	BASHSRCDIR="$BASHRCDIR/.bashrc.d"
	if [[ -d "$BASHSRCDIR" ]]; then
		for f in $(find "$BASHSRCDIR" -maxdepth 1 -type f); do
			source "$f"
		done
		if [[ -d "$BASHSRCDIR/$BASHHOST" ]]; then
			for f in $(find "$BASHSRCDIR/$BASHHOST" -maxdepth 1 -type f); do
				source "$f"
			done
		fi
		if [[ -n "$BASHZONE" ]] && [[ -d "$BASHSRCDIR/$BASHZONE" ]]; then
			for f in $(find "$BASHSRCDIR/$BASHZONE" -maxdepth 1 -type f); do
				source "$f"
			done
		fi
	fi
	unset BASHZONE BASHHOST BASHSRCDIR
fi

# Remove local functions up to here
unset -f set_prompt_and_uid add_home_bin set_remote_timeout clean_path_var set_shell_options ls_aliases system_specific_aliases convenience_aliases load_ssh_agent

type ccd > /dev/null 2>&1 && unset ccd
# create and cd
function ccd()
{
	mkdir -p -- "$1" && cd -- "$1"
}

# On Windows we return early
[[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || -n "$COMSPEC" ]] && return

if ((SHLVL < 2)); then
	if type -p lsb_release > /dev/null 2>&1; then
		if [[ -n $(lsb_release -sc) ]]; then
			echo -e "${cG_}$(lsb_release -si) $(lsb_release -sr)${cZ} ${cR_}($(lsb_release -sc))${cZ}"
		else
			echo -e "${cG_}$(lsb_release -si) $(lsb_release -sr)${cZ}"
		fi
	else
		echo -e "${cG_}$(uname -s) $(uname -r)${cZ}"
	fi
	cd
fi
