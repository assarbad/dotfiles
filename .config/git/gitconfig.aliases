[alias]
	Amend = !git amend --no-edit
	amend = commit --amend
	aliases = config --get-regexp alias\\.
	au = !git diff --name-only --ignore-submodules --diff-filter=d -z | xargs -0 -r git add --verbose
	back = !"__select_reflog_branch() \
			{ \
				type sk > /dev/null 2>&1 || { echo 'ERROR: sk does not seem to be installed.'; return 1; }; \
				local NUM=\"${1:-20}\"; \
				case $NUM in ''|*[!0-9]*) \
						echo 'ERROR: first argument '\"($NUM)\"' not an integer (the number of branches to show; defaults to 20 if not given).'; \
						return 1; \
						;; \
				esac; \
				LANG=C LC_ALL=C git reflog --pretty=format:'%h %aI %gD %gs' \
						| awk 'BEGIN { REFS[\"BOGUSREF\"] = 0; TGTBRNCHS[\"BOGUSBRNCH\"] = 0; } /checkout: moving from/ && !($1 in REFS) && !($9 in TGTBRNCHS) && $9 !~ /^[a-f0-9]{40}$/ { print $1, $2, $3, $7, $9; REFS[$1] = 1; TGTBRNCHS[$9] = 1; }' \
						| head -n $NUM \
						| while read -r commit date reflogref from to; do \
							if git show --oneline \"$to\" -- > /dev/null 2>&1; then \
								printf \"${cB}%s${cZ}: ${cY}%10s${cZ} ${cW}%s${cZ} [${cG}%s${cZ}]\\n\" \"$commit\" \"$reflogref\" \"$to\" \"$date\"; \
							fi; \
						done \
					| sk --ansi --no-multi --header 'Select recently used branch from reflog' -p 'RECENT BRANCH: ' --preview='git show -s --pretty=medium --color=always {3} --' --preview-window=right:40% \
					| awk '{print $3}'; \
			}; f() { local TGTBRNCH=$(__select_reflog_branch \"$@\"); test -n \"$TGTBRNCH\" || return 1; ( set -x; git switch \"$TGTBRNCH\" ); }; f"
	bk = back
	br = branch --ignore-case --sort=-committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) -> %(contents:subject) %(color:green)(%(committerdate:relative)%(color:reset), %(color:blue)%(committerdate:format:%Y-%m-%d %H:%M:%S)%(color:green)) %(color:red)[%(authorname)]%(color:reset)'
	branches = for-each-ref --ignore-case --count=30 --sort=-committerdate --format=\"%(color:yellow)%(committerdate:iso)  %(align:25)%(color:red)%(authorname)%(end)  %(color:white)%(color:bold)%(refname:short)\"
	brnchs = !git branches refs/heads
	brranches =  !git branches refs/remotes refs/heads
	delta = diff
	diffs = diff --staged
	cln = clone --filter=blob:none --recurse-submodules --also-filter-submodules
	ffm = merge --ff-only
	gconf = !git gconfig
	gconfig = config --global
	glog = log --cherry-mark --graph --simplify-by-decoration --oneline --all
	history = blame --color-by-age -w -M -C -C -C -C
	id = show -s --format=%H
	idshort = show -s --format=%h
	lg = !git -P log --cherry-mark '--pretty=format:%C(magenta)%h%C(reset) %C(red)%d%C(reset) %s %C(dim green)(%cr) [%an]' --abbrev-commit -50 && echo ''
	log1 = log --cherry-mark --oneline
	ls = log --cherry-mark --stat --decorate '--pretty=format:commit %C(green)%G?%C(reset) %C(auto)%H%d%n%an <%ae>%n[%ai] %s%n' --graph
	mksparse = !git config --local core.sparseCheckout true && git sparse-checkout init --cone --sparse-index
	move = mv
	nfm = merge --no-ff
	noff = !git nfm
	npdiff = !git -P diff
	npdiffs = !git -P diffs
	nuke = reset --hard
	optimize = !git config --local feature.manyFiles true && git config --local core.untrackedCache true && git config --local core.fsmonitor true && git config --local core.commitGraph true && git config --local fetch.writeCommitGraph true && git config --local  gc.writeCommitGraph && git update-index --index-version 4 && git commit-graph write --reachable
	pf = !git pushf
	pushf = push --force-with-lease
	recommit = !env TZ=UTC GIT_COMMITTER_DATE=\"$(date --utc -Iseconds)\" git commit --amend --no-edit --date \"$(date --utc -Iseconds)\"
	rename = mv
	rb = restore -SW
	rv = remote -v
	search = log --cherry-mark -p -S
	shclone = clone --depth 1 --filter=blob:none --recurse-submodules --also-filter-submodules
	shortid = show -s --format=%h
	smf = submodule foreach --recursive
	smeset = !git smf \"git reset\"
	smetch = !git smf \"git fetch\"
	smitch = !git smf \"git switch\"
	smull = !git smf \"git pull\"
	smupd = submodule update
	smupdate = !git smupd
	smur = !git smupd --recursive
	smurr = !git smur --remote
	spush = push --signed
	squash = !echo 'Did you mean rebase?'
	srebase = rebase --exec 'git commit --amend --no-edit -S'
	s = status -uno
	st = !git status
	stat = !git status
	stats = !git status
	statu = !git status
	tip = show -s --pretty=medium
	tips = !git tip --stat
	top = !git rev-parse --show-toplevel
	tree = log --cherry-mark --decorate --pretty=oneline --abbrev-commit --graph
	unshallow = "!git remote set-branches origin '*'; git fetch --unshallow --update-head-ok -v"
	upstreams = for-each-ref --color=always --format='%(align:30)%(color:white)%(color:bold)%(refname:short)%(color:reset)%(end) %(color:green)%(upstream:short)%(color:reset)' refs/heads
	wcdiff = diff --word-diff=color --ignore-space-at-eol
	wcdiffs = !git wcdiff --staged
	wdiff = diff --word-diff --ignore-space-at-eol
	wdiffs = !git wdiff --staged
