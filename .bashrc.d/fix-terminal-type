# vim: set autoindent smartindent ts=4 sw=4 sts=4 noet filetype=sh:

# Establish a default
if [[ -n "$TERM" ]]; then
	if type toe > /dev/null 2>&1 && type grep > /dev/null 2>&1; then
		# Figure out if we can use toe to get a list of supported terminal types, otherwise fall back to toe -h
		TOELIST=$(toe -a > /dev/null 2>&1 && echo "toe -a" || echo "toe -h")
		case "$TERM" in
			*-256color|screen)
				if $TOELIST|grep -vq "^$TERM[[:space:]]" || [[ "$TERM" == "screen" ]]; then # currently set terminal not locally supported?
					NEWTERM=
					if [[ -n "$TMUX" ]] || [[ -n "$TMUX_PANE" ]]; then # running in Tmux, though?
						if $TOELIST|grep -q "^tmux-256color[[:space:]]"; then
							NEWTERM=tmux-256color
						elif $TOELIST|grep -q "^screen-256color[[:space:]]"; then
							NEWTERM=screen-256color
						fi
					elif [[ -n "$GNOME_TERMINAL_SERVICE" ]] || [[ -n "$GNOME_TERMINAL_SCREEN" ]]; then # running in GNOME terminal, though?
						if $TOELIST|grep -q "^gnome-256color[[:space:]]"; then
							NEWTERM=gnome-256color
						fi
					fi
					if [[ -z "$NEWTERM" ]]; then
						if type dpkg > /dev/null 2>&1 && type awk > /dev/null 2>&1; then
							if command dpkg -l|awk '$1 ~ /^ii$/ && $2 ~ /^ncurses/ {print}'|grep -vq ncurses-term; then
								echo -ne "${cR}!${cY}ncurses-term${cZ} "
							fi
						fi
					fi
					export TERM=${NEWTERM:-screen}
				fi
				;;
		esac
		unset TOELIST
	fi
fi
