# vim: set autoindent smartindent ts=4 sw=4 sts=4 noet filetype=sh:

# We depend on Debian/Ubuntu
[[ -f "/etc/debian_version" ]] || { echo -e "\033[01;32mERROR:\033[00m This has only been tested on Debian/Ubuntu."; return; }

function prune-kernels
{
	local VENDOR=0
	type dpkg-vendor > /dev/null 2>&1 && let VENDOR=1
	if ((VENDOR)); then
		command dpkg-vendor --derives-from Debian || { echo -e "\033[01;32mERROR:\033[00m This has only been tested on Debian/Ubuntu."; return; }
	fi
	[[ -f "/etc/debian_version" ]] || { echo -e "\033[01;32mERROR:\033[00m This has only been tested on Debian/Ubuntu."; return; }
	[[ "$UID" -eq "0" ]] || local SUDO=sudo
	if command dpkg -l|command grep ^ii|command grep $(command dpkg --print-architecture)|command grep -q pve-kernel; then
		echo -e "Assuming we run on Proxmox VE (PVE) based on presence of pve-kernel packages"
		local PACKAGES=$(command dpkg -l|command grep ^ii|command grep $(command dpkg --print-architecture)|command grep pve-kernel|command grep -Fv pve-kernel-$(command uname -r)|command awk '{print $2}'|command sort -V|command sed '$ d')
		local NOWKRNL=$(command dpkg -l|command grep ^ii|command grep $(command dpkg --print-architecture)|command grep pve-kernel|command grep -Fv pve-kernel-$(command uname -r)|command awk '{print $2}'|command sort -V|command tail -n 1)
		NOWKRNL=${NOWKRNL#pve-kernel-}
		echo -ne "\033[01;32mSkipping \033[01;33mthe following kernels:\033[00m $NOWKRNL"
		[[ "$(uname -r)" == "$NOWKRNL" ]] || { echo -ne ", $(uname -r)"; }
		echo -e " (\033[0;32mcurrently running\033[00m)"
		if [[ -n "$PACKAGES" ]]; then
			echo -e "\033[0;32m[STEP 1] \033[01;33mRemoving packages\033[00m"
			$SUDO apt-get $APTGET_YES --purge autoremove $PACKAGES || { echo -e "\033[01;31mSeems that apt-get was not successful, aborting.\033[00m"; return; }
		else
			echo -e "\033[01;32mNo packages need to be removed.\033[00m"
		fi
	else
		VMLINUZ="/vmlinuz"
		if [[ ! -L "$VMLINUZ" ]]; then
			VMLINUZ="/boot/vmlinuz"
			if [[ ! -L "$VMLINUZ" ]]; then
				echo -e "\033[01;32mERROR:\033[00m Expected ${VMLINUZ##*/} to exist in / or /boot."
				return
			fi
		fi
		# Figure out the name of the newest and the previous kernel
		local OLDKRNL=$(readlink -f "${VMLINUZ}.old")
		local NOWKRNL=$(readlink -f "${VMLINUZ}")
		# If vmlinuz doesn't exist, Also prune "/vmlinuz.old"?
		[[ -L "${VMLINUZ}.old" ]] || OLDKRNL="$NOWKRNL"
		# Also prune "/vmlinuz.old"? If so, pretend old and new have the same name to skip only the new one
		[[ "$1" == "--old" ]] && local OLDKRNL="$NOWKRNL"
		# Strip path
		OLDKRNL="${OLDKRNL##*/vmlinuz-}"
		NOWKRNL="${NOWKRNL##*/vmlinuz-}"
		local VERSIONS=$(echo $(for krnl in /boot/vmlinuz-*; do echo "${krnl##*/vmlinuz-}"; done) $(for krnl in $(command dpkg -l|command grep 'linux-image'|command grep '^ii'|command grep -v 'meta-package'|command grep 'linux-image-[[:digit:]]\.[[:digit:]]*\.[[:digit:]]'|awk '{print $2}'); do echo ${krnl##linux-image-}; done)|sort|uniq|sed -e "s:$NOWKRNL::g;s:$OLDKRNL::g;s:$(uname -r)::g")
		echo -ne "\033[01;32mSkipping \033[01;33mthe following kernels:\033[00m $NOWKRNL"
		[[ "$(uname -r)" == "$NOWKRNL" ]] || { echo -ne ", $(uname -r)"; }
		echo -ne " (\033[0;32mcurrently running\033[00m)"
		[[ "$OLDKRNL" == "$NOWKRNL" ]] || echo -ne ", $OLDKRNL (\033[0;33mold kernel\033[00m)"
		echo ""
		# Remove packages
		local PACKAGES=$(for i in $VERSIONS; do echo -n "linux-image-$i linux-headers-$i linux-modules-$i linux-modules-extra-$i "; done)
		if [[ -n "$PACKAGES" ]]; then
			echo -e "\033[0;32m[STEP 1] \033[01;33mRemoving packages\033[00m"
			$SUDO apt-get $APTGET_YES --purge autoremove $PACKAGES || { echo -e "\033[01;31mSeems that apt-get was not successful, aborting.\033[00m"; return; }
		else
			echo -e "\033[01;32mNo packages need to be removed.\033[00m"
		fi
		# Remove any remaining kernel images etc from /boot
		local FILES=$(for fname in $(for i in $VERSIONS; do echo -n "/boot/abi-$i /boot/initrd.img-$i config-$i System.map-$i vmcoreinfo-$i vmlinuz-$i "; done); do [[ -f "$fname" ]] && { echo -n "$fname "; }; done)
		if [[ -n "$FILES" ]]; then
			echo -e "\033[0;32m[STEP 2] \033[01;33mNow removing remaining files:\033[00m $FILES"
			$SUDO rm -f $FILES
		else
			echo -e "\033[01;32mNothing else to clean up.\033[00m"
		fi
		if $SUDO apt-get --assume-no --just-print --purge autoremove 2>&1|grep -q '^Purg'; then
			local LINUXINCLUDES=$($SUDO apt-get --assume-no --just-print --purge autoremove 2>&1|grep -q '^Purg'|awk '{print $2}')
			echo -e "\033[01;32mRemove remaining packages with: ${SUDO} apt-get --purge autoremove $LINUXINCLUDES\033[00m"
		fi
		echo -e "If you want to purge the uninstalled packages as well, use:"
		echo -e "\tapt-get purge \$(dpkg -l|awk '\$1 ~ /^rc/ && \$2 ~ /^linux-(headers|image|modules|modules-extra)/ {print \$2}')"
	fi
}
