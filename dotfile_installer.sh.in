#!/usr/bin/env bash
function __onboard_readlink()
{
	local DIR=$(echo "${1%/*}")
	(cd "$DIR" && echo "$(pwd -P)/${1##*/}")
}
READLINK="readlink -f"
type readlink > /dev/null 2>&1 || READLINK=__onboard_readlink
TGZ=1
SELF=$($READLINK $0)
SDIR=${SELF%/*}
SELF=${SELF##*/}
DIRSELF="$SDIR/$SELF"
[[ "x$1" == "x--help" ]] && { echo "Syntax: $SELF <--help|--extract|{target-directory}>"; exit 255; }
TGTDIR=${1:-$HOME}
DOTF=".dotfiles"

# print_error <error-string>
function print_error
{
	echo -e "\033[01;31mERROR:\033[00m $1"
}

# error_exit <exit-code> <error-string>
function error_exit
{
	exit $1
}

function untar_payload
{
	local TGTDIR=$1
	match=$(grep --text --line-number '^PAYLOAD:$' "$DIRSELF" | cut -d ':' -f 1)
	payload_start=$((match + 1))
	[[ -d "$TGTDIR/$DOTF" ]] || mkdir -p "$TGTDIR/$DOTF"
	if (($TGZ)); then
		tail -n +$payload_start "$DIRSELF" | tar -C "$TGTDIR/$DOTF" -xzf - || { exit_error 1 "failed to extract payload ($DIRSELF) into '$TGTDIR/$DOTF'."; }
	else
		tail -n +$payload_start "$DIRSELF" | uudecode | tar -C "$TGTDIR/$DOTF" -xzf - || { exit_error 1 "failed to extract payload ($DIRSELF) into '$TGTDIR/$DOTF'."; }
	fi
	exit 0
}

function extract_payload
{
	local TGTDIR=$1
	match=$(grep --text --line-number '^PAYLOAD:$' "$DIRSELF" | cut -d ':' -f 1)
	payload_start=$((match + 1))
	local PAYLOAD="$TGTDIR/payload.tgz"
	[[ -d "$TGTDIR/$DOTF" ]] || mkdir -p "$TGTDIR/$DOTF"
	if (($TGZ)); then
		tail -n +$payload_start "$DIRSELF" > "$PAYLOAD" || { exit_error 1 "failed to extract payload ($DIRSELF) as $PAYLOAD'."; }
	else
		tail -n +$payload_start "$DIRSELF" | uudecode > "$PAYLOAD" || { exit_error 1 "failed to extract payload ($DIRSELF) as $PAYLOAD'."; }
	fi
	exit 0
}

[[ "x$1" == "x--extract" ]] && 
read -p "Install $DIRSELF and copy .bashrc and friends into $TGTDIR (^C to cancel)? " ans
if [[ "${ans:0:1}"  ||  "${ans:0:1}" ]]; then
	(
		( untar_payload "$TGTDIR" ) || { ERR=$?; print_error "at [$FUNCNAME:$LINENO]"; exit $ERR; }
		[[ -d "$TGTDIR/$DOTF" ]] && make -C "$TGTDIR/$DOTF" TGTDIR=$TGTDIR install && \
		echo -e "\033[01;31mDONE!\033[00m"
	) || { ERR=$?; print_error "at [$FUNCNAME:$LINENO]"; exit $ERR; }
fi
exit 0
